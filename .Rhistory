citation("jsonlite")
citation("stringr")
?stringr
library(stringr)
?stringr
citation("essentia")
library(essentia_streaming_extractor_music)
print(xtable(music_features, type= "latex", include.rownames=FALSE))
library(jsonlite)
library(stringr)
library(xtable)
json.folder <- ".json"
json.file <- list.files(json.folder, full.names = TRUE)
file.name.parts<- str_split(json.file, "-", simplify=TRUE)
artist<-str_sub(file.name.parts[1], start=7L)
album<-file.name.parts[2]
song.name<-str_sub(file.name.parts[3], end=-6L)
print(artist)
print(album)
print(song.name)
json.data<-fromJSON(json.file)
library(jsonlite)
library(stringr)
json.folder <- ".json"
json.file <- list.files(json.folder, full.names = TRUE)
file.name.parts<- str_split(json.file, "-", simplify=TRUE)
artist<-str_sub(file.name.parts[1], start=7L)
album<-file.name.parts[2]
song.name<-str_sub(file.name.parts[3], end=-6L)
print(artist)
print(album)
print(song.name)
json.data<-fromJSON(json.file)
View(music_features)
#install.packages("jsonlite")
library(jsonlite)
library(stringr)
json.folder <- ".json"
json.file <- list.files(json.folder, full.names = TRUE)
file.name.parts<- str_split(json.file, "-", simplify=TRUE)
artist<-str_sub(file.name.parts[1], start=7L)
album<-file.name.parts[2]
song.name<-str_sub(file.name.parts[3], end=-6L)
print(artist)
print(album)
print(song.name)
json.data<-fromJSON(json.file)
average.loundess <- json.data$lowlevel$average_loudness
mean.spectral.engery <- json.data$lowlevel$spectral_rolloff$mean
danceability <- json.data$rhythm$danceability
bpm <- json.data$rhythm$bpm
musical.key <- json.data$tonal$key_key
key.scale <- json.data$tonal$key_scale
length <- json.data$metadata$audio_properties$length
music_features <- data.frame(
Artist = artist ,
Album = album ,
Song = song.name ,
Average_Loudness = average.loundess,
Spectral_Energy_Mean = mean.spectral.engery,
Danceability = danceability,
BPM = bpm,
Key = musical.key,
Key_Scale = key.scale,
Length_Seconds = length
)
dim(music_features)
View(music_features)
install.packages("jsonlite")
library(jsonlite)
library(stringr)
json.folder <- ".json"
json.file <- list.files(json.folder, full.names = TRUE)
".json
list.files(json.folder, full.names = TRUE)
str_split(json.file, "-", simplify=TRUE)
str_sub(file.name.parts[1], start=7L)
artist<-str_sub(file.name.parts[1], start=7L)
print(artist)
print(song.name)
library(jsonlite)
library(stringr)
json.folder <- ".json"
install.packages("jsonlite")
library(jsonlite)
library(stringr)
json.folder <- ".json"
json.file <- list.files(json.folder, full.names = TRUE)
file.name.parts<- str_split(json.file, "-", simplify=TRUE)
artist<-str_sub(file.name.parts[1], start=7L)
album<-file.name.parts[2]
song.name<-str_sub(file.name.parts[3], end=-6L)
print(artist)
print(album)
print(song.name)
str_sub(file.name.parts[1], start=7L)
list.files(json.folder, full.names = TRUE)
".json"
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100)
integrand <- function(x){
f <- 7- 2 *x^2
return(f)
}
a <- 0
b <- 2
n.rect <- 100
(delta.x <- (b-a)/n.rect)
left.points <- a + 0:99*(delta.x)
right.points <- a + 1:100*(delta.x)
mid.points <- (left.points+right.points)/2
(left.area <- sum(delta.x*(integrand(left.points))))
(right.area <- sum(delta.x*(integrand(right.points))))
(mid.area <- sum(delta.x*(integrand(mid.points))))
(trap.area <- (delta.x / 2) * (integrand(a) + 2 * sum(integrand(left.points[-1])) + integrand(b)))
riemann.sums <- function(fnct,                        # function to integrate
a,                           # lower bound of integral
b,                           # upper bound of integral
n.rect,                      # number of  bound of integral
method = "Trapezoidial"){    # method to use (trap by default)
######################################
# Check Input
######################################
if(!is.numeric(a)){ # if a is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!is.numeric(b)){ # if b is not numeric
stop("The lower bound of the integral (a) must be numeric.")
}
if(!(is.numeric(n.rect)) | (n.rect%%1!=0)){ # if n.rect is not a whole number
stop("The number of rectangles must be a positive whole number.")
}
######################################
# Compute Area
######################################
(delta.x <- (b-a)/n.rect)
left.points <- a + 0:(n.rect -1)*(delta.x)
right.points <- a + 1:n.rect * (delta.x)
mid.points <- (left.points+right.points)/2
if(method == "Left"){
area <- sum(delta.x*fnct(left.points))
}else if(method == "Right"){
area <- sum(delta.x*fnct(right.points))
}else if(method == "Midpoint"){
area <- sum(delta.x*fnct(mid.points))
}else if(method == "Trapezoidial"){
area <- (delta.x / 2) * (fnct(a) + 2 * sum(fnct(left.points[-1])) + fnct(b))
}else{
stop("Please select a valid method (e.g., 'Left', 'Right', 'Midpoint', 'Trapezoidial')")
}
######################################
# Return the area
######################################
return(area)
}
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100)
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100,
method = "Left")
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100,
method = "Right")
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100,
method = "Midpoint")
######################################
# Test the function
######################################
riemann.sums(fnct = integrand,
a = 0,
b = 2,
n.rect = 100)
